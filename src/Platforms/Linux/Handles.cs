/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Vulkan.Linux
{
	public static class InstanceExtension
	{
		public static SurfaceKhr CreateMirSurfaceKHR (this Instance instance, MirSurfaceCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Linux.Interop.NativeMethods.vkCreateMirSurfaceKHR (instance.m, pCreateInfo.m, pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public static SurfaceKhr CreateWaylandSurfaceKHR (this Instance instance, WaylandSurfaceCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Linux.Interop.NativeMethods.vkCreateWaylandSurfaceKHR (instance.m, pCreateInfo.m, pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public static SurfaceKhr CreateXlibSurfaceKHR (this Instance instance, XlibSurfaceCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Linux.Interop.NativeMethods.vkCreateXlibSurfaceKHR (instance.m, pCreateInfo.m, pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}

		public static SurfaceKhr CreateXcbSurfaceKHR (this Instance instance, XcbSurfaceCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Linux.Interop.NativeMethods.vkCreateXcbSurfaceKHR (instance.m, pCreateInfo.m, pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}
	}

	public static class PhysicalDeviceExtension
	{
		public static Bool32 GetMirPresentationSupportKHR (this PhysicalDevice physicalDevice, UInt32 queueFamilyIndex, out MirConnection connection)
		{
			unsafe {
				fixed (MirConnection* ptrconnection = &connection) {
					return Linux.Interop.NativeMethods.vkGetPhysicalDeviceMirPresentationSupportKHR (physicalDevice.m, queueFamilyIndex, ptrconnection);
				}
			}
		}

		public static Bool32 GetWaylandPresentationSupportKHR (this PhysicalDevice physicalDevice, UInt32 queueFamilyIndex, out wl_display display)
		{
			unsafe {
				fixed (wl_display* ptrdisplay = &display) {
					return Linux.Interop.NativeMethods.vkGetPhysicalDeviceWaylandPresentationSupportKHR (physicalDevice.m, queueFamilyIndex, ptrdisplay);
				}
			}
		}

		public static Bool32 GetXlibPresentationSupportKHR (this PhysicalDevice physicalDevice, UInt32 queueFamilyIndex, out Display dpy, VisualID visualID)
		{
			unsafe {
				fixed (Display* ptrdpy = &dpy) {
					return Linux.Interop.NativeMethods.vkGetPhysicalDeviceXlibPresentationSupportKHR (physicalDevice.m, queueFamilyIndex, ptrdpy, visualID);
				}
			}
		}

		public static Bool32 GetXcbPresentationSupportKHR (this PhysicalDevice physicalDevice, UInt32 queueFamilyIndex, IntPtr connection, Int32 visual_id)
		{
			unsafe {
				fixed (IntPtr* ptrconnection = &connection) {
					return Linux.Interop.NativeMethods.vkGetPhysicalDeviceXcbPresentationSupportKHR (physicalDevice.m, queueFamilyIndex, ptrconnection, visual_id);
				}
			}
		}
	}

}
